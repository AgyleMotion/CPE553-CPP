%!PS-Adobe-3.0
%%Title: 
%%For:
%%Creator: Graphite0.1
%%CreationDate: 
%%BoundingBox: 20 20 772 592
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 1
%%PageOrder: Ascend
%%DocumentMedia: Letter 792 612 0 () ()
%%DocumentNeededResources
%%DocumentProcessColors: Color
%%EndComments
%%BeginProlog
%%Copyright: (c)2005 Dov Kruger
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
<< /PageSize [792 612] >> setpagedevice
<< /MaxOpStack 255000 >> setuserparams
%%EndPageSetup
% debugging routines

% print the stack and then a separator for visibility
/prStack
{
  pstack (===\n) print
} bind def

% display a message, then dump stack so you can tell where you are
/disp
{
  print (\n) print pstack (===\n) print
} bind def

%display every symbol and value in a dictionary (fix the format!)
/dumpDict % dict ==> -
{
  {
    == ==
%    print (   ) print dup type ==  pop %(  ) print print
  } forall
} bind def


% base class for style definitions
/base <<
  /FontName /Helvetica
  /FontSize 12
>> def

% specific style type
/cream <<
  /Inherits base
  /FontName /Helvetica
  /FontSize 12
  /LineWidth 0
  /Color [.9 .9 .7]
  /BorderColor [0 0 0]
%  /BorderDash [3] 0
  /BorderWidth 2
>> def

/stevens <<
  /Inherits base
  /FontName /Helvetica
  /FontSize 18
  /LineWidth 0
  /Color [.7 .7 .7]
  /BorderColor [0 0 0]
  /BorderWidth 2
>> def

% choose a specific font and size
/selectFont { exch findfont exch scalefont setfont  } def

% generate a rectangular path
/rectPath  % x1,y1,x2,y2 -> -
{
  newpath
  2 copy  moveto           % x2,y2
  1 index 3 index lineto   % x2,y1
  3 index 3 index lineto   % x1,y1
  exch pop exch pop lineto % x1,y2
  closepath
} def

% generate a path of a rounded rectangle with corner radius r
/roundrectPath  % x1,y1,x2,y2 r -> -
{
  /r exch def
  newpath
  2 copy  exch r sub exch r 0 90 arc            % x2-r,y2
  1 index 3 index r sub r 90 180 arc               % x2,y1
  3 index 3 index exch r sub exch r 180 270 arc   % x1,y1
  exch pop exch pop r add r 270 0 arc          % x1,y2
  closepath
} def

/fillRect { rectPath fill } def
/drawRect { rectPath stroke } def

/setStyle
{
  dup /currentstyle exch def
  begin
    FontName FontSize selectFont
    LineWidth setlinewidth
    Color  aload  pop setrgbcolor
  end
} bind def


% create a rectangular border in the specified style
/createBorder % x1 y1 x2 y2 style createborder -
{
  setStyle
  prStack
  4 copy rectPath %rectfill
  fill
  rectPath
  gsave
  currentstyle
  begin
    BorderColor aload pop setrgbcolor
    BorderWidth setlinewidth
  end
%  [3] 0 setdash
  stroke  %rectstroke  
  grestore
} bind def

%
% do this next routine through a dict also!
%

% select a rectangle within the world and scale within it linearly
% the first 4 coords are paper coordinates
% the second 4 are world coordinates
% x1 y1 x2 y2 px1 py1 px2 py2 scaleRect -
/scaleRect {
  20 dict
  begin
  /pymax exch def
  /pxmax exch def
  /pymin exch def
  /pxmin exch def
  /ymax exch def
  /xmax exch def
  /ymin exch def
  /xmin exch def

  /xsize xmax xmin sub def
  /ysize ymax ymin sub def
  /pxsize pxmax pxmin sub def
  /pysize pymax pymin sub def

%  0 0 1 setrgbcolor
%  0 0 moveto
%  xsize 0 lineto
%  xsize ysize lineto
%  0 ysize lineto
%  fill

%  matrix setmatrix
%  0 ymax translate
%  1 -1 scale
  xmin ymin translate
  xsize pxsize div ysize pysize div scale
  pxmin neg pymin neg translate
%  -74.1 40.5 transform (foo3)disp
%  -73.0 41 transform (foo3)disp
  end
} bind def

% Include an eps file, saving state from badly behaved files
% filename scalex scaley dx dy includeEPS -
/includeEPS {
%  matrix setmatrix
%  matrix currentmatrix
  /showpage {} def
  /setpagedevice /pop load def
%  pop pop
  translate
  scale
  save
  exch
  run
  restore
} bind def

/simpleArrow
{
  moveto 
  gsave setmatrix rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

/scaledSimpleArrow
{
  moveto 
  gsave setmatrix dup scale rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

/logScaledSimpleArrow
{
  moveto 
  gsave setmatrix log dup scale rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

/dispTextAt {
  /mat exch def
  /arr exch def
  0 3 arr length 1 sub {
    /i exch def
    arr i get 
    arr i 1 add get 
    arr i 2 add get
    moveto gsave mat pstack setmatrix show grestore
  } for
} bind def

% display text centered
/horizCenteredText {  
  /xmax exch def
  /xmin exch def
  /y exch def
  /text exch def
  xmax xmin add text stringwidth sub .5 mul y moveto
  text show
} bind def

/graphite <<
  /Styles 100 dict
  /Colormaps 5 dict
  /Borders 5 dict
>> def

/defineStyle {
  graphite /Styles get exch store
} bind def

/getStyle {
  graphite /Styles get exch get
} bind def

/defineColormap {
  graphite /Colormaps get 3 1 roll put
} bind def

/getColormap {
  graphite /Colormaps get exch get
} bind def


/ROYGBIV <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [6]
    /BitsPerSample 8
    /DataSource 
    <800090
    0080FF
    00FFFF
    FFFF00
    FF0000
    800000>
  >> defineColormap

/RedBlue <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    0000FF
    0000C0
    000080
    000040>
  >> defineColormap

/BlueRed <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    0000FF
    0000C0
    000080
    000040>
  >> defineColormap

/RedGreen <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    00FF00
    00C000
    008000
    004000>
  >> defineColormap

/GreenRed <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    00FF00
    00C000
    008000
    004000>
  >> defineColormap


%/para <<
%  /x 
%>>

/drawquad
{
  moveto
  lineto
  lineto
  lineto
  closepath
  stroke
} bind def

/leftJustInBox { % x y step
  /dy exch def
  /y exch def
  /x exch def
  {
    x y moveto
    show
    /y y dy sub def
  } forall
} bind def 

/drawgrid {
    /ny exch def
    /ymax exch def
    /ymin exch def
    /nx exch def
    /xmax exch def
    /xmin exch def
    ymin ymax ymin sub ny 1 sub div ymax {
	dup dup xmin exch moveto xmax exch lineto stroke
    } for
    xmin xmax xmin sub nx 1 sub div xmax {
	dup dup ymin moveto ymax lineto stroke
    } for
} bind def

/numgrid {
    /ny exch def
    /ymax exch def
    /ymin exch def
    /nx exch def
    /xmax exch def
    /xmin exch def
    ymin ymax ymin sub ny 1 sub div ymax {
	dup xmin .2 sub exch moveto (             ) cvs show
    } for
    xmin xmax xmin sub nx 1 sub div xmax {
	dup .1 sub ymin .1 sub moveto (             ) cvs show
    } for
} bind def

/drawcoastline {
    {
	/arr exch def
	newpath
	arr arr length 2 sub get arr arr length 1 sub get moveto
	%	    dup dup 0 get exch 1 get moveto
	arr aload length 2 idiv
	{
	    lineto
	} repeat
	stroke
    } forall
} bind def

/curvgrid
{
  /rows exch def
  /cols exch def
  0 1 rows 2 sub
  {
    cols mul /j exch def
    0 1 cols 2 sub
%    (foo!) pstack pop
    {
      j add /i exch def
%      i pstack pop
      grid i get       % get this grid cell
      grid i 1 add get
      grid i cols add 1 add get
      grid i cols add get
      length 0 ne
      exch length 0 ne and
      exch length 0 ne and
      exch length 0 ne and
      {
	grid i get       % get this grid cell
	aload
	pop
	pop

	grid i 1 add get  % get the one to the right
	aload
	pop
	pop

	grid i cols add 1 add get % and the one up and to the right
	aload
	pop
	pop

	grid i cols add get      % up
	aload
	pop
	pop
	drawquad
       } if
    } for
  } for

} def

gsave
0 setlinewidth
20 20 772 592 -75.6 37.5 -69.6 42.8 scaleRect

%gsave
%[0.03] 0 setdash
%-75.5 -70 12 38 42.5 10 drawgrid
%grestore

0 0 .6 setrgbcolor
%coast drawcoastline

0 0 0 setrgbcolor
%0 80 900 650 -74.2857 40.3939 -73.83 40.882 scaleRect
%0 80 600 950 -74.195 40.6 -74.05 40.85 scaleRect

%grid 59 94 curvgrid pop
%grid 136 424 curvgrid pop

% -75 -71 9 40 42 5 drawgrid -

/Helvetica .1 selectFont
1 0 0 setrgbcolor
-75.5 -70 12 38 42.5 10 numgrid

grestore
%(logo.eps) 1 1 0 0 includeEPS

/Helvetica 24 selectFont
(NYHOPS High Resolution Grid, v20) 400 750 moveto show

/Helvetica 8 selectFont
500 50 moveto
(Model design by: Dov Kruger, Nicholas Kim, Alan Blumberg) show
500 40 moveto
(Bathymetry: Dov Kruger, Matthew Marko, Peter Stahley) show
500 30 moveto
(Rendered by graphite) show
500 20 moveto
(Generated: 2005/07/20 20:14:54) show
showpage
%%Trailer
%%EOF
