% debugging routines

% print the stack and then a separator for visibility
/prStack
{
  pstack (===\n) print
} bind def

% display a message, then dump stack so you can tell where you are
/disp
{
  print (\n) print pstack (===\n) print
} bind def

%display every symbol and value in a dictionary (fix the format!)
/dumpDict % dict ==> -
{
  {
    == ==
%    print (   ) print dup type ==  pop %(  ) print print
  } forall
} bind def


% base class for style definitions
/base <<
  /FontName /Helvetica
  /FontSize 12
>> def

% specific style type
/cream <<
  /Inherits base
  /FontName /Helvetica
  /FontSize 12
  /LineWidth 0
  /Color [.9 .9 .7]
  /BorderColor [0 0 0]
%  /BorderDash [3] 0
  /BorderWidth 2
>> def

/stevens <<
  /Inherits base
  /FontName /Helvetica
  /FontSize 18
  /LineWidth 0
  /Color [.7 .7 .7]
  /BorderColor [0 0 0]
  /BorderWidth 2
>> def

% choose a specific font and size
/selectFont { exch findfont exch scalefont setfont  } def

% generate a rectangular path
/rectPath  % x1,y1,x2,y2 -> -
{
  newpath
  2 copy  moveto           % x2,y2
  1 index 3 index lineto   % x2,y1
  3 index 3 index lineto   % x1,y1
  exch pop exch pop lineto % x1,y2
  closepath
} def

% generate a path of a rounded rectangle with corner radius r
/roundrectPath  % x1,y1,x2,y2 r -> -
{
  /r exch def
  newpath
  2 copy  exch r sub exch r 0 90 arc            % x2-r,y2
  1 index 3 index r sub r 90 180 arc               % x2,y1
  3 index 3 index exch r sub exch r 180 270 arc   % x1,y1
  exch pop exch pop r add r 270 0 arc          % x1,y2
  closepath
} def

 % x1,y1,x2,y2 -> -
/fillRect { rectPath fill } def

 % x1,y1,x2,y2 -> -
/drawRect { rectPath stroke } def

%TODO: roundrect needs SERIOUS help
 % x1,y1,x2,y2 -> -
/fillRoundRect { roundrectPath fill } def

 % x1,y1,x2,y2 -> -
/drawRoundRect { roundrectPath stroke } def

/setStyle
{
  dup /currentstyle exch def
  begin
    FontName FontSize selectFont
    LineWidth setlinewidth
    Color  aload  pop setrgbcolor
  end
} bind def


% create a rectangular border in the specified style
/createBorder % x1 y1 x2 y2 style createborder -
{
  setStyle
  prStack
  4 copy rectPath %rectfill
  fill
  rectPath
  gsave
  currentstyle
  begin
    BorderColor aload pop setrgbcolor
    BorderWidth setlinewidth
  end
%  [3] 0 setdash
  stroke  %rectstroke  
  grestore
} bind def

%
% do this next routine through a dict also!
%

% select a rectangle within the world and scale within it linearly
% the first 4 coords are paper coordinates
% the second 4 are world coordinates
% x1 y1 x2 y2 px1 py1 px2 py2 scaleRect -
/scaleRect {
  20 dict
  begin
  /pymax exch def
  /pxmax exch def
  /pymin exch def
  /pxmin exch def
  /ymax exch def
  /xmax exch def
  /ymin exch def
  /xmin exch def

  /xsize xmax xmin sub def
  /ysize ymax ymin sub def
  /pxsize pxmax pxmin sub def
  /pysize pymax pymin sub def

%  0 0 1 setrgbcolor
%  0 0 moveto
%  xsize 0 lineto
%  xsize ysize lineto
%  0 ysize lineto
%  fill

%  matrix setmatrix
%  0 ymax translate
%  1 -1 scale
  xmin ymin translate
  xsize pxsize div ysize pysize div scale
  pxmin neg pymin neg translate
%  -74.1 40.5 transform (foo3)disp
%  -73.0 41 transform (foo3)disp
  end
} bind def

% Include an eps file, saving state from badly behaved files
% filename scalex scaley dx dy includeEPS -
/includeEPS {
  5 dict begin
%  matrix setmatrix
%  matrix currentmatrix
  /showpage {} def
  /setpagedevice /pop load def
%  pop pop
  translate
  scale
  exch
  save
} bind def

% ang m x y -> -
/simpleArrow
{
  moveto 
  gsave rotate %setmatrix rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

% ang scale x y -> -
/scaledSimpleArrow
{
  moveto 
  gsave dup scale rotate
  0 1 rlineto

  -.1 -.3 rlineto
  +.2 0 rlineto
  -.1 .3 rlineto fill
  grestore
} bind def

/logScaledSimpleArrow
{
  moveto 
  gsave setmatrix log dup scale rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

/dispTextAt {
  /mat exch def
  /arr exch def
  0 3 arr length 1 sub {
    /i exch def
    arr i get 
    arr i 1 add get 
    arr i 2 add get
    moveto gsave mat pstack setmatrix show grestore
  } for
} bind def

% display text centered
/horizCenteredText {  
  /xmax exch def
  /xmin exch def
  /y exch def
  /text exch def
  xmax xmin add text stringwidth sub .5 mul y moveto
  text show
} bind def

/graphite <<
  /Styles 100 dict
  /Colormaps 5 dict
  /Borders 5 dict
>> def

/defineStyle {
  graphite /Styles get exch store
} bind def

/getStyle {
  graphite /Styles get exch get
} bind def

/defineColormap {
  graphite /Colormaps get 3 1 roll put
} bind def

/getColormap {
  graphite /Colormaps get exch get
} bind def


/ROYGBIV <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [6]
    /BitsPerSample 8
    /DataSource 
    <800090
    0080FF
    00FFFF
    FFFF00
    FF0000
    800000>
  >> defineColormap

/RedBlue <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    0000FF
    0000C0
    000080
    000040>
  >> defineColormap

/BlueRed <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    0000FF
    0000C0
    000080
    000040>
  >> defineColormap

/RedGreen <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    00FF00
    00C000
    008000
    004000>
  >> defineColormap

/GreenRed <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    00FF00
    00C000
    008000
    004000>
  >> defineColormap

/drawquad
{
  moveto
  lineto
  lineto
  lineto
  closepath
  stroke
} bind def

/fillquad
{
  mul cvi setcolor
  moveto
  lineto
  lineto
  lineto
  fill
} bind def


/plotmaskedmatrix {
  5 dict begin
  /grid exch def

  0 setlinewidth
  0 1 grid /jmax get 1 sub  {
    /j exch def
    grid /mask get j get /row exch def
    0 1 grid /imax get 1 sub {
      /i exch def
      row i get 48 ne {
	i j 1 1 rectstroke
      } if
    } for
  } for
  end
} bind def

/numbermaskedmatrix {
  8 dict begin
  /varname exch def
  /grid exch def
  /valindex 0 def
  0 setlinewidth
  0 1 grid /jmax get 1 sub  {
    /j exch def
    grid /mask get j get /row exch def
    0 1 grid /imax get 1 sub {
      /i exch def
      row i get 48 ne {
	i j 1 1 rectstroke
	i j moveto
	grid varname get valindex get (        ) cvs 0 2 getinterval show
	/valindex valindex 1 add def
      } if
    } for
  } for
  end
} bind def


/fillmaskedmatrix {
  8 dict begin
  /varname exch def
  /grid exch def
  /colorscale 1 100 div 255 mul def
  /valindex 0 def
  0 setlinewidth
  0 1 grid /jmax get 1 sub  {
    /j exch def
    grid /mask get j get /row exch def
    0 1 grid /imax get 1 sub {
      /i exch def
      row i get 48 ne {
	grid varname get valindex get colorscale mul cvi setcolor
	i j 1 1 rectfill

	/valindex valindex 1 add def
      } if
    } for
  } for
  end
} bind def


/setbluepalette {
  [/Indexed /DeviceRGB 255
    <FFFFFF
      FCFCFF F8F8FF F4F4FF F0F0FF ECECFF E8E8FF E4E4FF E0E0FF
      DCDCFF D8D8FF D4D4FF D0D0FF CCCCFF C8C8FF C4C4FF C0C0FF
      BCBCFF B8B8FF B4B4FF B0B0FF ACACFF A8A8FF A4A4FF A0A0FF 
      9C9CFF 9898FF 9494FF 9090FF 8C8CFF 8888FF 8484FF 8080FF
      7C7CFF 7878FF 7474FF 7070FF 6C6CFF 6868FF 6464FF 6060FF
      5C5CFF 5858FF 5454FF 5050FF 4C4CFF 4848FF 4444FF 4040FF
      3C3CFF 3838FF 3434FF 3030FF 2C2CFF 2828FF 2424FF 2020FF
      1C1CFF 1818FF 1414FF 1010FF 0C0CFF 0808FF 0404FF
     0000FF 0000FE 0000FD 0000FC 0000FB 0000FA 0000F9 0000F8
     0000F7 0000F6 0000F5 0000F4 0000F3 0000F2 0000F1 0000F0
     0000EF 0000EE 0000ED 0000EC 0000EB 0000EA 0000E9 0000E8
     0000E7 0000E6 0000E5 0000E4 0000E3 0000E2 0000E1 0000E0
     0000DF 0000DE 0000DD 0000DC 0000DB 0000DA 0000D9 0000D8
     0000D7 0000D6 0000D5 0000D4 0000D3 0000D2 0000D1 0000D0
     0000CF 0000CE 0000CD 0000CC 0000CB 0000CA 0000C9 0000C8
     0000C7 0000C6 0000C5 0000C4 0000C3 0000C2 0000C1 0000C0
     0000BF 0000BE 0000BD 0000BC 0000BB 0000BA 0000B9 0000B8
     0000B7 0000B6 0000B5 0000B4 0000B3 0000B2 0000B1 0000B0
     0000AF 0000AE 0000AD 0000AC 0000AB 0000AA 0000A9 0000A8
     0000A7 0000A6 0000A5 0000A4 0000A3 0000A2 0000A1 0000A0
     00009F 00009E 00009D 00009C 00009B 00009A 000099 000098
     000097 000096 000095 000094 000093 000092 000091 000090
     00008F 00008E 00008D 00008C 00008B 00008A 000089 000088
     000087 000086 000085 000084 000083 000082 000081 000080
     00007F 00007E 00007D 00007C 00007B 00007A 000079 000078
     000077 000076 000075 000074 000073 000072 000071 000070
     00006F 00006E 00006D 00006C 00006B 00006A 000069 000068
     000067 000066 000065 000064 000063 000062 000061 000060
     00005F 00005E 00005D 00005C 00005B 00005A 000059 000058
     000057 000056 000055 000054 000053 000052 000051 000050
     00004F 00004E 00004D 00004C 00004B 00004A 000049 000048
     000047 000046 000045 000044 000043 000042 000041 000040>
%      00003C000038000034000030000000002C000028000024000020
%      00001C000018000014000010000000000C000008000004000000
   ] setcolorspace
} bind def

/block <<
  /x 20
  /y 80
  /dx 0
  /dy -14
  /style /normal
%  /background /none
%  /border /none
  /text [
    (this is a test)
    (this is only a test)
    (if this had been an actual test, you'd know)
    (BGIAJ)
  ]
>> def

/t1 <<
  /x 20
  /y 100
  /dx 0
  /dy -14
  /style /title
%  /background /none
%  /border /none
  /text [
    (Postscript Rules!)
  ]
>> def

/styles <<
  /normal { /Helvetica findfont 12 scalefont setfont 0 0 0 setrgbcolor }
  /title { /Helvetica-bold findfont 24 scalefont setfont }
  /subtitle { /Helvetica findfont 18 scalefont setfont }
  /notes { /Helvetica findfont 8 scalefont setfont }
>> def

/drawTextBlock {
  5 dict begin
  /block exch def
  styles  block /style get get exec
  /x block /x get def 
  /y block /y get def
  block /text get {
    x y moveto pstack show
    /x x block /dx get add def
    /y y block /dy get add def
  } forall
  end
} bind def

/leftJustInBox { % x y step
  /dy exch def
  /y exch def
  /x exch def
  {
    x y moveto
    show
    /y y dy sub def
  } forall
} bind def 

% [ (string) (string) ...] dx dy x y -> -
/displayTextBlock {
  5 dict begin
    /y exch def
    /x exch def
    /dy exch def
    /dx exch def
    {
      x y       prStack moveto show
      /x x dx add def
      /y y dy add def

     } forall
  end
} bind def

/drawgrid {
    /ny exch def
    /ymax exch def
    /ymin exch def
    /nx exch def
    /xmax exch def
    /xmin exch def
    ymin ymax ymin sub ny 1 sub div ymax {
	dup dup xmin exch moveto xmax exch lineto stroke
    } for
    xmin xmax xmin sub nx 1 sub div xmax {
	dup dup ymin moveto ymax lineto stroke
    } for
} bind def

%
% xmin xmax numdivisions ymin ymax numdivisions numgrid - 
% Draws numbers on the axis
%
/numgrid {
  10 dict begin
    /ny exch def
    /ymax exch def
    /ymin exch def
    /nx exch def
    /xmax exch def
    /xmin exch def
    /text (      ) def
    ymin ymax ymin sub ny 1 sub div ymax {
%      dup text cvs stringwidth .5 mul 2 index sub neg 
%      exch .5 mul xmin exch sub exch moveto (             ) cvs show
      dup xmin exch 2 copy == == (\n) print  moveto (      ) cvs show
    } for
    xmin xmax xmin sub nx 1 sub div xmax {
	dup .05 sub ymin .1 sub moveto (             ) cvs show
    } for
  end
} bind def

%
% array of arrays of x y points: [  [x y x y ...] [x y x y ..] ...] drawcoastline -
% Draw polygon for each internal array
% A different version could fill in the future, but the polygons would have to
% be higher quality. the current set is not always properly closed
%
/drawcoastline {
    {
	/arr exch def
	newpath
	arr arr length 2 sub get arr arr length 1 sub get moveto
	arr aload length 2 idiv
	{
	    lineto
	} repeat
	stroke
    } forall
} bind def

% [x] [y] -> -
/lineplot {
  /y exch def
  /x exch def
  x 0 get y 0 get moveto
  1 1 x length 1 sub {
    dup x exch get exch y exch get lineto
  } for
  stroke
} def

% [x] [y] scale /markerroutine -> -
/markerplot {
  /marker exch def
  /sc exch def
  /y exch def
  /x exch def
  0 1 x length 1 sub {
    dup x exch get exch y exch get sc 3 1 roll currentdict marker get exec
  } for
  stroke
} def

% start inc end y0pts y1pts m a -> -
% draw tick marks on the x axis
% start inc end are all in world coordinates
% y0 y1 are the endpoints of the line in points
% m and a are the conversion factors to convert start,inc,end to points
/xtick {
  /a exch def
  /m exch def
  /y1pts exch def
  /y0pts exch def
  {
    m mul a add dup y0pts moveto y1pts lineto stroke
  } for
} def

% same as xtick above except for y axes. This should eventually be
% the same code using transformations, but for now this is easier
/ytick {
  /a exch def
  /m exch def
  /x1pts exch def
  /x0pts exch def
  {
    m mul a add dup x0pts exch moveto x1pts exch lineto stroke
  } for
} def

% scale x y -> -
/markersquare {
  newpath
  moveto 
  gsave
    dup scale
    -1 -1 rmoveto
    2 0 rlineto
    0 2 rlineto
    -2 0 rlineto
    closepath
    stroke
  grestore
} def

%Draw a unit circle marker centered
% scale x y -> -
/markercircle {
  newpath
   gsave
   2 index 0 360 arc stroke pop
   grestore  
}bind def

% scale x y -> -
/markerx {
  newpath
  moveto
  gsave
  dup scale
  -1 -1 rmoveto
  +2 +2 rlineto
  +0 -2 rmoveto
  -2 +2 rlineto
  stroke
  grestore
} def
  

% scale x y /marker -> -
/strokeMarker {
  exec
  stroke
  grestore
} def

% r g b scale x y /marker -> -
/strokeAndFillMarker {
  exec
  gsave
  stroke
  grestore
  setrgbcolor
  fill
  grestore
} def

% scale x y /marker -> -
/fillMarker {
  exec
  fill
  grestore
} def




